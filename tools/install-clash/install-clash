#!/usr/bin/env bash
set -e

PLATFORM="$PLATFORM"
[ -n "$PLATFORM" ] || PLATFORM="linux-amd64"

CLASH_HOME="$CLASH_HOME"
[ -n "$CLASH_HOME" ] || CLASH_HOME="$(pwd)"

CLASH_VERSION="$CLASH_VERSION"

require() {
    local requirement="$1"
    if [ -z "$(command -v $requirement)" ]; then
        echo "This script require '$requirement' command to run. Please install it. "
        exit 1
    fi
}

require jq
require date
require curl
require gzip

_tempfile="/tmp/tmp-$(date +%s%N)"
_workdir="$(realpath "$CLASH_HOME")"
_datadir="$_workdir/data"

setup_start() {
    __OLD_IFS=$IFS
    IFS=$'\n'
    [ -d "$_tempfile" ] || mkdir -p "$_tempfile"
    [ -d "$_datadir" ] || mkdir -p "$_datadir"
    [ -d "$_workdir/bin" ] || mkdir -p "$_workdir/bin"
}

FINISHED='false'
cleanup_exit() {
    [ -n "$FINISHED" ] || return
    [ "$FINISHED" == 'true' ] || echo

    echo "Cleaning up..."
    IFS=$__OLD_IFS
    [ -d "$_tempfile" ] && rm -rf "$_tempfile" -v
    FINISHED=''
    exit 0
}

trap "cleanup_exit" SIGINT SIGTERM EXIT

setup_start

echo "Will install clash into '$_workdir'."

CURL=(curl -L "$CURL_OPT")
(echo "$@" | grep '\-v' > /dev/null 2>&1) || CURL=(${CURL[@]} "-#")
fetch() { ${CURL[@]} $@; }

VERSION_LIST="$_tempfile/versions"
GITHUB_REPO="MetaCubeX/mihomo"

VERSION_LIST_ENDPOINT="https://api.github.com/repos/$GITHUB_REPO/releases"
[ -z "$CLASH_VERSION" ] || VERSION_LIST_ENDPOINT="$VERSION_LIST_ENDPOINT/tags/$CLASH_VERSION"
[ -z "$CLASH_VERSION" ] || echo "Using version: $CLASH_VERSION"

##
echo "Downloading file list"
if [ -z "$CLASH_VERSION" ]; then

fetch -H "Accept: application/vnd.github.v3+json" "$VERSION_LIST_ENDPOINT" \
| jq '.[0] | { name: .name , assets : .assets | map({ name: .name, content_type: .content_type, browser_download_url: .browser_download_url }) }' \
> "$VERSION_LIST"

else
fetch -H "Accept: application/vnd.github.v3+json" "$VERSION_LIST_ENDPOINT" \
| jq '{ name: .name , assets : .assets | map({ name: .name, content_type: .content_type, browser_download_url: .browser_download_url }) }' \
> "$VERSION_LIST"
fi
##

CURRENT_VERSION=""
[ -f "$_datadir/current_version" ] && CURRENT_VERSION=$(cat "$_datadir/current_version") || :

LATEST_VERSION=$(cat "$VERSION_LIST" | jq '.name')

[ "$CURRENT_VERSION" == "$LATEST_VERSION" ] && {
	(echo "$@" | grep '\-r' > /dev/null 2>&1) || { echo "Version is same: $CURRENT_VERSION, $LATEST_VERSION. Use '-r' to reinstall."; exit 0; }
}

FILTERED_VERSION_LIST="$_tempfile/filtered_version"
cat "$VERSION_LIST" | jq '.assets | map(select(.name | contains("linux-amd64") and endswith(".gz")))' > "$FILTERED_VERSION_LIST"

SELECTED_VERSION=""
FILTERED_VERSION_LIST_LENGTH=$(cat $FILTERED_VERSION_LIST | jq 'length')
if [ "$FILTERED_VERSION_LIST_LENGTH" -gt '1' ]
then
    __selection=""
    __number='^[0-9]+$'
    while : ; do
        echo "There are multiple versions of '$PLATFORM':"
        cat "$FILTERED_VERSION_LIST" | jq -r '. | to_entries | map({ index: .key, name : .value.name }) | .[] | ((.index + 1) | tostring) + ": " + .name '
        read -p "Select one:" __selection
        if [[ "$__selection" =~ $__number ]] && ([ "$__selection" -le "$FILTERED_VERSION_LIST_LENGTH" ] && [ "$__selection" -gt "0" ]); then
            break
        fi
        echo "[!] Input must be a number between 1-$FILTERED_VERSION_LIST_LENGTH."
        echo
    done
    SELECTED_VERSION=$(cat "$FILTERED_VERSION_LIST" | jq -r " .[$(($__selection - 1))] | .browser_download_url ")
elif [ "$FILTERED_VERSION_LIST_LENGTH" -eq '1' ]; then
    SELECTED_VERSION=$(cat "$FILTERED_VERSION_LIST" | jq -r " .[0] | .browser_download_url ")
else
    echo "Unsupported platform '$PLATFORM'."
    exit 1
fi
echo "Selected '$SELECTED_VERSION', start download."
fetch "$SELECTED_VERSION" -o "$_tempfile/clash.gz"

##
echo "Installing..."

gzip -vcd "$_tempfile/clash.gz" > "$_workdir/bin/clash"
echo "Extracted Clash to target directory."

chmod +x "$_workdir/bin/clash"
echo "Added executable flag to binary."

echo "$LATEST_VERSION" > "$_datadir/current_version"
FINISHED='true'
echo "Finished."

exit 0
