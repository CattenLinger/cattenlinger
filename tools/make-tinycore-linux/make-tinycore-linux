#!/bin/bash
set -e

################################################################
# Init
################################################################

# Check root
[ 0 == $UID ] || { echo "Builder script requires super user permissions."; exit 0; }

# check command exists, or exit with 1;
require() {
  for i in $@
  do 
    [ -n "$(command -v $1 2> /dev/null)" ] || { echo "Command '$1' is required"; exit 1; } 
  done
}

# Check command exists.
require curl unsquashfs cpio zcat uniq

################################################################
# Prepare settings
################################################################

# Give default value to TC_REPO
TC_REPO="$TC_REPO"
[ -z "$TC_REPO" ] && TC_REPO="http://tinycorelinux.net/"

# Init variables
unset DOWNLOAD FETCH PACKAGES

# The download command
CURL_DOWNLOAD="curl -L -# --retry 10 --retry-all-errors --connect-timeout 5 --speed-limit 10 --speed-time 5"
DOWNLOAD() {
  eval "$CURL_DOWNLOAD $@"
}

# The fetch command
CURL_FETCH="curl -sf --retry 10 --connect-timeout 5 --speed-time 5"
FETCH() {
  eval "$CURL_FETCH $@"
}

# if should cache downloaded files
CACHE_FILES="$CACHE_FILES"
cache_files_enabled() {
  [ b'true' == b"$CACHE_FILES" ]
}

WORK_DIR="$(pwd)"
echo "Will use '$WORK_DIR' as current dir"

BUILD_OUTPUT="$BUILD_OUTPUT"
[ -z "BUILD_OUTPUT" ] && BUILD_OUTPUT="$WORK_DIR"

PACKAGES=()

################################################################
# Prepare functions
################################################################

apply_build_rc() {
  if [ -f "$WORK_DIR/build.rc" ]
  then
    echo "'build.rc' found. Applying settings."
    source "$WORK_DIR/build.rc"
  fi

  [ 0 -lt "${#PACKAGES[@]}" ] && echo "Packages will be install: ${PACKAGES[@]}"

  # Create output directory if not exists.
  [ -d "$BUILD_OUTPUT" ] || mkdir -vp "$BUILD_OUTPUT"
  echo "'$BUILD_OUTPUT' will be the output directory"
}

apply_tc_settings() {
  # See http://tinycorelinux.net/downloads.html
  TC_VERSION=$TC_VERSION
  [ -z "$TC_VERSION" ] && TC_VERSION="13"

  # See http://tinycorelinux.net/TC_VERSION
  TC_ARCH=$TC_ARCH
  [ -z "$TC_ARCH" ] && TC_ARCH="x86_64"

  TC_CORE=
  TC_RAMDISK=
  case $TC_ARCH in
    "x86")
      TC_CORE="vmlinuz"
      TC_RAMDISK="core.gz"
      ;;
    "x86_64")
      TC_CORE="vmlinuz64"
      TC_RAMDISK="corepure64.gz"
      ;;
    *)
      echo "Unsupported ARCH $TC_ARCH"
      exit 1
    ;;
  esac
  echo "Useing tinycore linux $TC_VERSION, arch $TC_ARCH"
}


prepare_workspace() {
  BUILD_DIR="$WORK_DIR/build"

  # Create build directory if not exists
  [ -d "$BUILD_DIR" ] || { echo "Create build directory"; mkdir -v "$BUILD_DIR"; }

  # Setting DO NOT CLEAN UP after build
  DO_NOT_CLEAN_UP="$DO_NOT_CLEAN_UP"
  # forward compability
  [ -z "$DO_NOT_CLEAN_UP" ] && DO_NOT_CLEAN_UP="$DO_NOT_CLEANUP"
  do_not_clean_up() {
    [ b'true' == b"$DO_NOT_CLEAN_UP" ]
  }

  # Setup exit hook
  EXIT_HOOKS=": && rm -rf $BUILD_DIR/*.tmp "
  exit_hook() {
    EXIT_HOOKS="$EXIT_HOOKS && $1"
  }
  __clean_on_exit() {
    [ b'true' == b"$DO_NOT_CLEAN_UP" ] && return 0
    echo "Executing exit hook."
    eval "$EXIT_HOOKS"
  }
  trap __clean_on_exit SIGINT SIGTERM SIGKILL EXIT
}

prepare_tinycore_linux_image() {
  local tccore="$BUILD_DIR/$TC_CORE"
  local tcramdisk="$BUILD_DIR/$TC_RAMDISK"

  if [ ! -f "$tccore" ]
  then
    echo "Downloading tinycore..."
    # If kernel does not exists, download it from repo
    [ -f "$tccore" ] || (
      DOWNLOAD "$TC_REPO/$TC_VERSION.x/$TC_ARCH/release/distribution_files/$TC_CORE" -o "$tccore.tmp"; 
      mv "$tccore.tmp" "$tccore";
    )
    cache_files_enabled || exit_hook "rm -rf '$tccore'"

    echo "Downloading initramfs..."
    # If initrd does not exists, download it from repo
    [ -f "$tcrandisk" ] || (
        DOWNLOAD "$TC_REPO/$TC_VERSION.x/$TC_ARCH/release/distribution_files/$TC_RAMDISK" -o "$tcramdisk.tmp"; 
        mv "$tcramdisk.tmp" "$tcramdisk";
    )
    cache_files_enabled || exit_hook "rm -rf '$tcramdisk'"
  fi
}

prepare_packages() {
  PACKAGE_DIR="$BUILD_DIR/tcz"
  PACKAGE_LIST="$BUILD_DIR/package.list"

  [ -d "$PACKAGE_DIR" ] || mkdir "$PACKAGE_DIR"
  
  # if do_not_clean_up set, not deleting temp files after build
  do_not_clean_up || exit_hook "find '$PACKAGE_DIR' -name '*.tmp' -exec rm -rf {} \; "

  # if cache_files set, not deleting packages after build
  cache_files_enabled || exit_hook "rm -rf '$PACKAGE_DIR'"

  resolve_package_recursively() {
    local pkgname="$1"
    local depth="$2"
    local pkgdep="$PACKAGE_DIR/$pkgname.dep"

    [ -z "$pkgname" ] && return 0

    echo "$depth|- $pkgname";

    # Download package dependency file and cache it
    { [ ! -f "$pkgdep" ] && (FETCH -sf "$TC_REPO/$TC_VERSION.x/$TC_ARCH/tcz/$pkgname.dep" || :)>> "$pkgdep"; } || :

    # If package has dependencies then resolve dependencies recursively
    local pkg
    [ 0 -lt `cat "$pkgdep" | wc -l | tr -d '[:space:]'` ] && cat "$pkgdep" | sed '/^$/d' | while read pkg
    do
      resolve_package_recursively $pkg "$depth   "
    done

    # Add package and dependencies to the temp file
    echo "$pkgname" >> "$PACKAGE_LIST.tmp"
    cat "$pkgdep" >> "$PACKAGE_LIST.tmp"

    do_not_clean_up || rm -rf "$pkgdep"
  }

  resolve_packages() {
    touch "$PACKAGE_LIST"
    local i
    for i in ${PACKAGES[@]}
    do
      echo "Resolving dependencies for '$i'...";
      resolve_package_recursively "$i.tcz"
    done

    cat "$PACKAGE_LIST.tmp" | sort | uniq | sed '/^$/d' > "$PACKAGE_LIST"
  }

  download_and_unpack_packages() {
    echo "Start preparing $(cat "$PACKAGE_LIST" | wc -l | tr -d '[:space:]') packages..."
    local _IFS="$IFS"
    IFS=$'\n'
    local i
    for i in $(cat "$PACKAGE_LIST")
    do
      [ -z "$i" ] && continue

      [ -f "$PACKAGE_DIR/$i" ] || (
        cd "$PACKAGE_DIR" ; 
        echo "Fetching package '$i'..." ;
        DOWNLOAD "$TC_REPO/$TC_VERSION.x/$TC_ARCH/tcz/$i" -o "$i.tmp" ;
        mv "$i.tmp" "$i"
      )

      ( 
        cd "$BUILD_DIR";
        echo "Unpacking '$i'...";
        unsquashfs -quiet -f "$PACKAGE_DIR/$i" ;
      )
    done
    IFS="$_IFS"
  }

  if [ 0 -lt "${#PACKAGES[@]}" ]
  then
    echo "Preparing ${#PACKAGES[@]} package(s)."
    
    resolve_packages
    download_and_unpack_packages
    
    exit_hook "rm -rf '$BUILD_DIR/squashfs-root'"

    F_APPLY_PACKAGES='true'
  fi
}

extract_rootfs() {
  local rootfs="$BUILD_DIR/rootfs"
  echo "Extracting rootfs..."

  # Delete rootfs dir if exists
  [ -d "$rootfs" ] && rm -rf "$rootfs" 
  ( mkdir -p "$rootfs"; cd "$rootfs"; gzip -d -c "$BUILD_DIR/$TC_RAMDISK" | cpio -idm )

  exit_hook "rm -rf '$rootfs'"
}

apply_packages() {
  if [ b'true' == b"$F_APPLY_PACKAGES" ]
  then
    echo "Copying packages to rootfs."
    cp -Rp "$BUILD_DIR/squashfs-root/usr/." "$BUILD_DIR/rootfs/usr/"
  fi
}

apply_additional_patchs() {
  if declare -f additional_patchs > /dev/null 2>&1
  then
    ( echo "Applying additional patchs."; cd $BUILD_DIR; additional_patchs; )
  fi
}

generate_new_rootfs() {
  # repackage core into initrd.gz
  echo "Generating new rootfs"
  ( cd "$BUILD_DIR/rootfs" ; find -P . | cpio -o -H newc ) | gzip -c > "$BUILD_OUTPUT/initrd.gz"
}

copy_core() {
  echo "Copying Linux core"
  cp "$BUILD_DIR/$TC_CORE" "$BUILD_OUTPUT/vmlinuz"
}

#
# Main
#

echo
apply_build_rc
apply_tc_settings
echo

prepare_workspace

prepare_tinycore_linux_image
prepare_packages

extract_rootfs
apply_packages

apply_additional_patchs

generate_new_rootfs
copy_core

echo
echo "TinyCore copied to '$BUILD_OUTPUT/vmlinuz'"
echo "InitRamFS generated to '$BUILD_OUTPUT/initrd.gz'"
echo